---
- name: install dependencies
  become: true
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
    state: latest
  changed_when: false

- name: download docker armored GPG key
  become: true
  get_url:
    url: "{{ docker_repo_url }}/gpg"
    dest: "{{ docker_keyring_path }}"

- name: get system architecture
  command: dpkg --print-architecture
  register: system_architecture
  changed_when: false

- name: get os version codename
  shell: ". /etc/os-release && echo $VERSION_CODENAME"
  register: os_version_codename
  changed_when: false

- name: add docker repository
  become: true
  apt_repository:
    repo: "deb [arch={{ system_architecture.stdout }} signed-by={{ docker_keyring_path }}] {{ docker_repo_url }} {{ os_version_codename.stdout }} stable"
    filename: /etc/apt/sources.list.d/docker

- name: install docker
  become: true
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest

- name: make sure docker is active
  service:
    name: docker
    state: started
    enabled: true

- name: add remote user to "docker" group
  become: true
  user:
    name: "{{ ansible_env.USER }}"
    groups: "docker"
    append: true

- name: determine system architecture
  set_fact:
    docker_compose_cli_arch: >-
      {{
        {
          'aarch64': 'aarch64',
          'arm64': 'aarch64',
          'x86_64': 'x86_64',
          'amd64': 'x86_64'
        }.get(ansible_architecture, 'invalid')
      }}

- name: fail if architecture is not supported
  fail:
    msg: "Unsupported architecture: {{ ansible_architecture }}. Supported values are ['aarch64', 'arm64', 'x86_64', 'amd64']."
  when: docker_compose_cli_arch == 'invalid'

- name: install docker-compose
  become: true
  get_url:
    url: "{{ docker_compose_download_url }}"
    dest: /usr/local/bin/docker-compose
    mode: "0755"
  notify:
    - restart docker
